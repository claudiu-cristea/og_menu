<?php
// $Id$

/**
 * Implementation of hook_help().
 */
function og_menu_help($path, $arg) {
  switch ($path) {
    case 'admin/help#og_menu':
      return t('Allows members of an Organic Group to access only parts of Drupal menus. Settings are per menu.');
      break;
    case 'admin/modules#description':
      return t('Allow group members to edit selected parts of a menu.');
      break;
  }
}

/**
 * Implementation of hook_init()
 */
function og_menu_init() {
  $path = drupal_get_path('module', 'og_menu');
  drupal_add_js($path . '/og_menu.js');
  drupal_add_css($path . '/og_menu.css');
}

/**
 * Implementation of hook_perm().
 */
function og_menu_perm() {
  return array('administer group menu');
}


/**
 * Implementation of hook_menu().
 */
function og_menu_menu() {
  $items['og/menu'] = array(
    'title' => 'Menus',
    'description' => t('Rename, remove, add and reorganize your menu items.'),
    'page callback' => '_og_menu_overview_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer menu'),
    'file' => 'og_menu.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}


/**
* Implementation of hook_block().
*/
function og_menu_block($op = 'list', $delta = 0, $edit = array()) {
  switch($op) {
    // used to discover which block is being called
    // forwards to the appropriate case where the content is built
    case 'list':
      $blocks[0]['info'] = t('OG Menu');
      return $blocks;
      ///

    case 'configure':
      switch($delta) {
        case 0:
          // put settings here (if any)
          $form['og_menu_block'] = array(
            '#type' => 'checkbox',
            '#title' => t('Enable title link'),
            '#description' => t('Checking this box will cause the menu title to link to the group homepage. The title link will then be styled with the attribute "og_menu-title" for styling purposes.'),
            '#default_value' => variable_get('og_menu_title_link', 0),
          );
          
          return $form;
      }
      return $form;

    case 'save':
      switch($delta) {
        case 0:
          // write variable to database here
          variable_set(
            'og_menu_title_link',
            $edit['og_menu_block']
          );
          break;
      }

    case 'view': default:
      switch($delta) {
        case 0:
          // assemble block
          $block = _og_menu_get_menu_block();
          break;
      }

      return $block;
  }
}

/**
 * Implementation of hook_form_alter().
 * Requires Organic Groups og_all_groups_options()
 * Uses _og_menu_groups() to get list of groups
 * Uses _og_menu_edit_menu_submit() to save option changes
 * Uses _og_menu_delete_confirm_submit() to delete options when menu is deleted
 */
function og_menu_form_alter(&$form, $form_state, $form_id) {
  switch($form_id) {
    case 'page_node_form':
      //print print_r($form);
      
      if (!user_access('administer group menu')) {
        global $user;
        
        // get menu options for user
        $result = db_query("
          SELECT * 
          FROM {menu_custom} 
          JOIN (
            {og_uid},
            {og_menu_groups}
          ) 
          ON (
            {menu_custom}.menu_name = {og_menu_groups}.mid 
            AND 
            {og_menu_groups}.gid = {og_uid}.nid
          ) 
          WHERE {og_uid}.uid = $user->uid 
          ORDER BY menu_name
          ;"
        );
        
        // filter Parent item list to reveal only member associated groups as parents
        $filtered = array();
        
        while ($menu = db_fetch_array($result)) {
          //$menus[] = $menu['menu_name'];
          
          foreach ($form['menu']['parent']['#options'] as $key => $item) {
            $pos = strpos($key, $menu['menu_name']);
            // use === to check position since we're expecting the needle to be in position 0
            if ($pos !== FALSE)
              $filtered[$key] = $item;
          }
        }
        
        // update list
        $form['menu']['parent'] = array(
          '#type' => 'select',
          '#title' => 'Parent page',
          '#default-value' => $form['menu']['parent']['#default_value'],
          '#options' => $filtered,
          '#description' => $form['menu']['parent']['#description'],
          '#attributes' => $form['menu']['parent']['#attributes'],
        );
      }
    
      break;
      ///
    case 'menu_edit_item':
      // only change method for adding item if in a group menu
      if (in_array($form['menu']['original_item']['#value']['menu_name'], _og_menu_menus())) {
        
        //print print_r($form);
        
        // change link_path from textfield to select of related group pages
        $form['menu']['link_options'] = array(
          '#type' => 'select',
          '#title' => 'Group Pages (Filtered List)',
          '#default' => $form['menu']['original_item']['#value']['link_path'],
          '#options' => _og_menu_menu_options($form['menu']['original_item']['#value']['menu_name']), // returns array
          '#attributes' => array(
            'class' => 'menu-title-select',
            'onchange' => 'og_menu_link_title(this.options[selectedIndex].text);',
          ),
          '#description' => t('You must have at least one page in your group for this list to have options.'),
          '#required' => 0,
          '#weight' => -1,
        );
        
        // override menu link title - commented, may make active but field offers same functionality as like pages 
        /*$form['menu']['link_title'] = array_merge(
          $form['menu']['link_title'], array(
            '#title' => 'Page Title in Menu',
            '#description' => 'The title of this item as it will appear in the menu. Defaults to the page title.',
          )
        );*/
        
        
        // filter Parent item list to reveal only current group options
        $filtered = array();
        foreach ($form['menu']['parent']['#options'] as $key => $item) {
          $pos = strpos($key, $form['menu']['original_item']['#value']['menu_name']);
          // use === to check position since we're expecting the needle to be in position 0
          if ($pos !== FALSE)
            $filtered[$key] = $item;
        }
        
        // update list
        $form['menu']['parent'] = array(
          '#type' => 'select',
          '#title' => 'Parent page',
          '#default-value' => $form['menu']['parent']['#default_value'],
          '#options' => $filtered,
          '#description' => $form['menu']['parent']['#description'],
          '#attributes' => $form['menu']['parent']['#attributes'],
        );
      }
    
      break;
      ///
      
    case 'menu_edit_menu':
      $default_value = array();
      // get array of defaults if menu has already been added to {menu_custom}
      if(isset($form['menu_name']['#value']))
        $default_value = variable_get('node_options_' . $node->type, _og_menu_defaults($form['menu_name']['#value']));
      
      $form['og_menu'] = array(
        '#title' => t('Group Permissions'),
        '#description' => t('Restrict menu access to the selected groups.'),
        '#type' => 'checkboxes',
        '#tree' => TRUE,
        '#options' => og_all_groups_options(), // Organic Groups method
        // see http://api.drupal.org/api/file/developer/topics/forms_api_reference.html/6#checkboxes for how to handle defaults
        '#default_value' => $default_value, 
        '#weight' => 10,
      );
      
      // prevent group admin from removing or recategorizing their assigned navigation
      // this is restricted for site admins only
      if (!user_access('administer group menu')) {
        unset($form['og_menu']);
        unset($form['delete']);
      }
      
      $form['#submit'][] = '_og_menu_edit_menu_submit'; // register callback

      break;
      ///
      
    case 'menu_delete_menu_confirm':
      $form['#submit'][] = '_og_menu_delete_menu_confirm_submit'; // register callback
      break;
      ///
      
  }
}

/**
 * Takes current group menu name as argument
 * Returns an array of group page nid/title to be used as form options
 */
function _og_menu_menu_options($mid) {
  $list = array();

  // get all related group pages
  $sql = db_query("
    SELECT {og_ancestry}.nid, {node}.title FROM {og_ancestry} 
    JOIN ({og_menu_groups}, {node}, {og_uid}) 
    ON (
      {og_ancestry}.group_nid = {og_uid}.nid 
      AND 
      {og_menu_groups}.gid = {og_uid}.nid
      AND
      {og_ancestry}.nid = {node}.nid
    ) 
    WHERE {og_menu_groups}.mid = '%s';", 
    $mid
  );
  
  // propogate list as "node/[nid] :: [node title]"
  while ($option = db_fetch_array($sql)) {
    $list['node/' . $option['nid']] = 'node/' . $option['nid'] . ' :: ' . $option['title'];
  }
  
  return $list;
}

/**
 * Takes menu id (text)
 * Returns array of group names to be used as default values in form
 * Called by hook_form_alter() implementation
 */
function _og_menu_defaults($mid) {
  $r = array();
  
  // load set values for this menu
  $i = 0;
  $sql = db_query("
    SELECT * 
    FROM {og_menu_groups} 
    WHERE mid = '%s'
    ;",
    $mid
  );
  while($row = db_fetch_array($sql)) {
    // set defaults for all options
    foreach (og_all_groups_options() as $key => $value) {
      //print "<p>\$mid: $mid<br />\$key: $key<br />\$value: $value</p>";
      if($row['gid'] == $key) {
        // set to be checked if in list and in table
        $r[$i] = $key;
      }
      $i++;
    }
  }
  
  return $r;
}

/**
 * Returns array of current group menu names
 * Used to confine hook_form_alter() changes to group menus only
 * Without this every menu edit page (primary links, secondary links, etc) will be hooked
 */
function _og_menu_menus() {
  $list = array();

  $sql = db_query("SELECT mid FROM {og_menu_groups};");
  
  while ($item = db_fetch_array($sql)) {
    $list[] = $item['mid'];
  }
  
  return $list;
}

/**
 * Registered Callback
 * Writes group settings to database
 * Called by hook_form_alter() implementation
 */
function _og_menu_edit_menu_submit(&$form, &$form_values) {
  // get the menu name & prepend if menu itself is just being added
  $mid = $form['menu_name']['#value'];
  $pos = strpos($mid, 'menu-');
  // use === to check position since we're expecting the needle to be in position 0
  if ($pos === FALSE)
    $mid = 'menu-' . $mid;

  // maintenance (if user is allowed to administer group menu)
  // update records inserting/deleting where needed
  if (user_access('administer group menu'))
  foreach($form['og_menu']['#options'] as $option => $name) {
    // default not to set option unless explicitly told to do so
    $set_option = FALSE;
    
    // is the options already set?
    $is_default = in_array($option, $form['og_menu']['#default_value']);
    
    // check if this option is being posted
    if(isset($form['og_menu']['#post']['og_menu'])) 
      $set_option = in_array($option, $form['og_menu']['#post']['og_menu']);
    
    if ($set_option && !$is_default) {
      db_query("
        INSERT 
        INTO {og_menu_groups} (
          gid,
          mid
        ) 
        VALUES (
          %d, 
          '%s'
        );", 
        $option, 
        $mid
      );
    } elseif (!$set_option) {
      db_query("
        DELETE 
        FROM {og_menu_groups} 
        WHERE (
          gid = %d 
          AND 
          mid = '%s'
        );",
        $option,
        $mid);
    }
  }
}

/**
 * Registered Callback
 * Deletes group settings from database
 * Called by hook_form_alter() implementation
 */
function _og_menu_delete_menu_confirm_submit(&$form, $form_id) {
  // get the menu form name
  $mid = $form['#menu']['menu_name'];
  
  // removes items from database
  $sql = db_query("
    SELECT * 
    FROM {og_menu_groups} 
    WHERE mid = '%s'
    ;",
    $mid
  );
  while($row = db_fetch_array($sql)) {
    // remove each setting for this menu
    db_query("
      DELETE 
      FROM {og_menu_groups} 
      WHERE mid = '%s'
      ;",
      $mid
    );
  }
}

/**
 * Returns formatted html for the group menu associated with the current page (if any)
 */
function _og_menu_get_menu_block() {
  global $user;
  
  // get current node
  if (arg(0) == 'node') {
    $nid = arg(1);
  }

  // get menu for group main and sub pages only
  $sql = db_query("
    SELECT DISTINCT *
    FROM {og_ancestry} 
    JOIN (
      {og_menu_groups},
      {menu_custom}
    ) 
    ON (
      {og_menu_groups}.mid = {menu_custom}.menu_name
    ) 
    WHERE (
      (
        {og_ancestry}.nid = %d
        AND
        {og_ancestry}.group_nid = {og_menu_groups}.gid
      )
      OR
      (
        {og_menu_groups}.gid = %d
        AND
        {og_ancestry}.group_nid = {og_menu_groups}.gid
      )
    );", 
    $nid, 
    $nid
  );
  
  $content = '';
  $subject = '';
  
  $count = 0;
  
  while ($items = db_fetch_array($sql)) {
    // get drupal basic menu rendering
    $content = menu_tree($items['mid']);
    $subject = $items['title'];
    $subject_nid = $items['group_nid'];
    
    /*
    // set warning array
    $warnings = array();
    
    // warning in while loop to check if more than one menu exists
    if (user_access('administer menu') && $count > 0) {
      $warn = t('You have more than one menu assigned to this group. Only one menu will be shown (no settings for which one).');
      if (!in_array($warn, $warnings))
        $warnings[] = $warn . 'count: ' . $count;
    }
    
    // counter for determining if the menu is empty
    $count++;
    */
  }
  
  // Make title a link instead
  if (variable_get('og_menu_title_link',0)) {
  
    // Prepare subject node link/path
    $s = node_load($subject_nid);
    $parent_path = '';
    if (isSet($s->path)) {
      $subject_path = $GLOBALS['base_url'].'/'.$s->path;
    } else {
      $subject_path = $GLOBALS['base_url'].'/node/'.$s->nid;
    }
    
    // Set attributes for subject link
    $options = array(
      'attributes' => array(
        'class' => 'og_menu-title',
      ),
    );
    
    // Convert menu title to path
    $subject = l($subject, $subject_path, $options);
  }
  
  // Write to block
  $block = array(
    'content' => $content,
    'subject' => $subject,
  );
  
  // return block
  return $block;
}

